
#include "pch.h"
#include <iostream>
#include <conio.h>//отвечает за реагирования на кнопки на клавиатуре и запоминания кнопки,которую нажали(_kbhit() & _getch())
#include <ctime>//отвечает за рандом и время
#include <vector>//библиотека для нашей змейки,т.к. она будет вектором структур zmeiyka
#include <Windows.h>//для использования функционала ОС
using namespace std;//пространство имен
HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
void zastavka() {//эта функция рисует заставку
	for (int i = 0; i < 30; i++) {
		cout << "                                     ";
		if (i >= 10 && i <= 14) {
			for (int q = 0; q < 50; q++) {
				switch (i) {
				case 10:
					if  ((q >= 0 && q <= 4) || (q == 7) || (q == 11) || (q >= 14 && q <= 18) || (q >= 21 && q <= 25) || (q == 28) || (q == 31) || (q == 36)) {
						cout << "*";
					}
					else cout << " ";
					break;
				case 11:
					if (((q == 3) || (q >= 7 && q <= 11 && q != 9) || (q == 14) || (q == 23) || (q == 28) || (q == 30) || (q == 35) || (q == 37))) {
						cout << "*";
					}
					else cout << " ";
					break;
				case 12:
					if (((q == 2) || (q == 7) || (q == 11) || (q == 9) || (q >= 14 && q <= 18) || (q == 23) || (q == 28) || (q == 29) || (q == 34) || (q == 38))) {
						cout << "*";
					}
					else cout << " ";
					break;
				case 13:
					if ( ((q == 1) || (q == 7) || (q == 11) || (q == 14) || (q == 23) || (q == 28) || (q == 30) || (q >= 34 && q <= 38))) {
						cout << "*";
					}
					else cout << " ";
					break;
				case 14:
					if (((q >= 0 && q <= 4) || (q == 7) || (q == 11) || (q >= 14 && q <= 18) || (q >= 21 && q <= 25) || (q == 28) || (q == 33) || (q == 39))) {
						cout << "*";
					}
					else cout << " ";
					break;
				}
			}
		}
		if (i == 17) {
			cout << "чтобы начать игру нажмите любую клавишу";
		}
		cout << endl;
	}
}
void pole() {//рисует поле игры
	for (int i = 0; i < 29; i++) {
		for (int q = 0; q < 61; q++) {
			if ((i == 0 || i == 28)||(q==0||q==60)) {
				cout << "#";
			}
			else cout << " ";
		}
		cout << endl;
	}
}
double level(double level) {//уровни сложности,т.е. чем сложнее,тем время передвижения змейки на одну позицию меньше
	if (level == 1) return 0.25;
	if (level == 2)return 0.16;
	if (level == 3)return 0.07;
	if (level == 4)return 0.035;
}
class zmeiuka {//класс который содержит 2 переменные,описывающие змейку и 2 метода
public:
	COORD poszmei;//координаты каждого "куска" змейки
	char ris;//то,что рисуется(либо *,либо головка,либо символ "стирания",т.е. пробел
	//метод перемещения змейки,который переставляет переданный элемент в зависимости от ножатой в последний раз кнопки
	zmeiuka peremesh(zmeiuka a, char knop) {
		COORD Q;//переменная координат,которой будем присваивать новые координаты в зависимости от нажатой кнопки
		switch (knop) {
		case 75://влево
			Q.X = a.poszmei.X--;
			Q.Y = a.poszmei.Y;
			break;
		case 77://вправо
			Q.X = a.poszmei.X++;
			Q.Y = a.poszmei.Y;
			break;
		case 80://вниз
			Q.X = a.poszmei.X;
			Q.Y = a.poszmei.Y++;
			break;
		case 72://наверх
			Q.X = a.poszmei.X;
			Q.Y = a.poszmei.Y--;
			break;
		}
		SetConsoleCursorPosition(hConsole, Q);//установка курсора на нужную позицию
		cout << a.ris;//вывод символа на этой позиции
		return a;
	}
	//ф-ия,которая определяет координаты последнего элемента,который появился после поедания "еды"
	zmeiuka poyavlenie(zmeiuka a, char knop, COORD cord) {
		switch (knop) {
		case 75:
			a.poszmei.X = cord.X--;
			a.poszmei.Y = cord.Y;
			break;
		case 77:
			a.poszmei.X = cord.X++;
			a.poszmei.Y = cord.Y;
			break;
		case 80:
			a.poszmei.X = cord.X;
			a.poszmei.Y = cord.Y++;
			break;
		case 72:
			a.poszmei.X = cord.X;
			a.poszmei.Y = cord.Y--;
			break;
		}
		return a;
	}
};
int main()
{
	srand(time(0));
	bool reshim=false;//переменная для выбора режима
	bool lose = false;//переменная,которая фиксирует "проигрыш"
	double speed, n = 1;//переменные,отвечающие за скорость перемещения змейки(speed) и условный таймер(n)
	char proverka = 72,prov2,ster;//3 переменные для проверок на нажатие ненправильной кнопки
	int kekus=1,ochki=0;//kekus-переменная для выбора уровня,ochki-кол-во набранных очков
	int a, b,x,y,cvet;//a,b,x,y-вспомогательные переменные для проверки того,не врезалилась змейка в сама себя,cvet-цвет змейки
	int razmer = 10;//размер змейки-1(последний символ это символ "стирания"-пробел
	char restart=0;//переменная,читающая кнопку,которые нажал человек,который проиграл и направляет на дальнейшее в зависимости от условий
	COORD cord;//координаты последнего(стирающего)элемента змейки
	vector <char> knopka(razmer);//вектор действий на каждый элемент змейки,который зависит от нажатий
	vector <zmeiuka> zmeka(razmer);//вектор класса каждого элемента змейки
	zmeiuka metka;//"еда" змейки
	//позиция метки(абсолютно случайная,но находящаяся в поле
	metka.poszmei.X = rand() % 59+1;
	metka.poszmei.Y = rand() % 27+1;
	metka.ris = '*';
	setlocale(0, "rus");//подключение русского языка
	zastavka();//ф-ия,рисующая заставка
	ster = _getch();//getch() запоминает "номер" нажатой кнопки
	system("cls");//чистит консоль от всего
	cout << "выберете уровень сложности 1-легко,2-средне,3-сложно,4-минус пукан "<<endl;
	ster = 0;
	cin >> kekus;
	speed = level(kekus);//ф-ия выбора уровня сложности
	cout << "змейка белая(0) или меняет цвет(1)?"<<endl;
	cin >> reshim;
	cout << "пауза-esc,если готовы начать нажмите на любую кнопку"<<endl;
	cout << "после нажатия змейка появится через 1 секунду и сразу начнет двигаться!будьте к этому готовы!нажмите пробел чтобы начать";
	while (ster != 32) {
		ster = _getch();
	}//пока не будет нажат пробел,программа не продожит работу 
	system("cls");
	double start = clock(), end = clock();//переменные засекающие время
	double	t = (end - start) / CLOCKS_PER_SEC;//t,переводящее время в секунды
	system("cls");
	pole();//ф-ия,рисует поле игры
	for (int i = 0; i < razmer; i++) {//заполняет вектора нужными данными(позиция каждого элемента змейки и условные действия каждого элемента
		zmeka[i].poszmei.X = 30+i;
		zmeka[i].poszmei.Y = 10;
		zmeka[i].ris = 'x';
		knopka[i] = 75;
	}
	zmeka[razmer - 1].ris = ' ';//последний стирающий элемент,являющийся пробелом
	while (!lose) {//пока не проиграл
		t = (end - start) / CLOCKS_PER_SEC;//переменная,засекающая каждый раз прошедшее время после выполнения одного оборота цикла
		cord = zmeka[razmer - 1].poszmei;
		SetConsoleCursorPosition(hConsole, metka.poszmei);
		cout << metka.ris;
		end = clock();
		if (_kbhit()) {//если произошло нажатие
			knopka[0] = _getch();
		}
		if ((knopka[0] == 27)&&proverka!=knopka[0]) {//если человек захочет нажать на паузу
			SetConsoleCursorPosition(hConsole, { 80,10 });
			SetConsoleTextAttribute(hConsole, (WORD)((0 << 4) | 15));//возращает стандартный цвет,чтобы было видно все в консоли
			cout << "пауза.Нажмите пробел чтобы продолжить";
			while (knopka[0]!=32) {//пока нет нажатия время не идет
				end = 0;
				n=1;
				start = 0;
				knopka[0] = _getch();
			}
			start = clock();
			end = clock();
			SetConsoleCursorPosition(hConsole, { 80,10 });
			cout << "                                      ";
		}
		if (knopka[0] != 75 && knopka[0] != 77 && knopka[0] != 80 && knopka[0] != 72) {//создаю нереагирование на другие кнопки(сверху еще esc))
			knopka[0] = proverka;
		}
		proverka = knopka[0];//запоминаю для проверки
		prov2 = knopka[razmer - 1];//запоминаю для того,что если мы съедим "еду",то увеличилась бы змейка нормально 
		if ((t > n)) {//если таймер больше прошедшего времени
			if (reshim == 1) {//меняет цвет
				cvet = rand() % 15 + 1;
				SetConsoleTextAttribute(hConsole, (WORD)((0 << 4) | cvet));
			}
			for (int i = 0; i < razmer - 1; i++) {//прогоняет для каждого 
				switch (knopka[i]) {
				case 75:
					if (knopka[i + 1] != 77) {//если предыдущая нажатая клавиша не была противоположной
						zmeka[0].ris = '<';
						zmeka[i] = zmeka[i].peremesh(zmeka[i], knopka[i]);//обращается к ф-ии перемещения для i-го элемента
					}
					else {
						knopka[0] = knopka[1];
						i--;
					}
					break;
				case 77:
					if (knopka[i + 1] != 75) {
						zmeka[0].ris = '>';
						zmeka[i] = zmeka[i].peremesh(zmeka[i], knopka[i]);
					}
					else {
						knopka[0] = knopka[1];
						i--;
					}
					break;
				case 80:
					if (knopka[i + 1] != 72) {
						zmeka[0].ris = 'v';
						zmeka[i] = zmeka[i].peremesh(zmeka[i], knopka[i]);
					}
					else {
						knopka[0] = knopka[1];
						i--;
					}
					break;
				case 72:
					if (knopka[i + 1] != 80) {
						zmeka[0].ris = '^';
						zmeka[i] = zmeka[i].peremesh(zmeka[i], knopka[i]);
					}
					else {
						knopka[0] = knopka[1];
						i--;
					}
					break;
				}
			}
			SetConsoleTextAttribute(hConsole, (WORD)((0 << 4) | 15));
			zmeka[razmer - 1] = zmeka[razmer-1].peremesh(zmeka[razmer - 1], knopka[razmer - 1]);
			n =n+speed;
			if (zmeka[0].poszmei.X == metka.poszmei.X&&zmeka[0].poszmei.Y == metka.poszmei.Y) {//если змейка съела "еду"
				razmer++;
				zmeka.resize(razmer);
				knopka.resize(razmer);
				//speed = speed - 0.001;
				knopka[razmer - 1] = prov2;
				zmeka[razmer - 2].ris = 'x';
				zmeka[razmer - 1] = zmeka[razmer-1].poyavlenie(zmeka[razmer - 1], prov2, cord);//на пустом месте появляется новый элемент
				metka.poszmei.X = rand() % 59+1;
				metka.poszmei.Y = rand() % 27+1;
				for (int i = 0; i < razmer; i++) {//проверяет не зарандомила ли программа "еду" на саму змейку
					if (zmeka[i].poszmei.X == metka.poszmei.X&&zmeka[i].poszmei.Y == metka.poszmei.Y) {
						metka.poszmei.X = rand() % 59 + 1;
						metka.poszmei.Y = rand() % 27 + 1;
					}
				}
				ochki=ochki+5;
				metka.ris = '*';
				zmeka[razmer - 1].ris = ' ';
			}
			zmeka[razmer - 1].ris = ' ';
			for (int i = razmer - 1; i > 0; i--) {//передвигает действия на одну позицию назад
				knopka[i] = knopka[i - 1];
			}
		}
		//дальше проверяет врезалась ли змейка куда-либо
		if (zmeka[0].poszmei.X == 0 || zmeka[0].poszmei.Y == 0 || zmeka[0].poszmei.X == 60 || zmeka[0].poszmei.Y == 28)
			lose = true;
		for (int i = 0; i < razmer;i++) {
			for (int q = i+1; q < razmer; q++) {
				a = zmeka[i].poszmei.X;
				b = zmeka[i].poszmei.Y;
				x = zmeka[q].poszmei.X;
				y = zmeka[q].poszmei.Y;
				if (a==x&&b==y)
					lose = true;
			}
		}

	}
	SetConsoleCursorPosition(hConsole, { 40,40 });
	cout << "к сожалению,вы проиграли(((";
	SetConsoleCursorPosition(hConsole, { 40,41 });
	cout << "ваше количество очков : " << ochki;
	SetConsoleCursorPosition(hConsole, { 40,42 });
	cout << "если хотите начать заново нажмите пробел,иначе-esc";
	restart = _getch();
	while (restart != 32 && restart != 27) {
		restart = _getch();
	}
	if (restart == 32)main();
	return 0;
}
